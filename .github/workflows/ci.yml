name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  MONGODB_VERSION: '5.0'
  REDIS_VERSION: '6.2'

jobs:
  # Lint and Format Check
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend/web && npm ci
          cd ../extension && npm ci

      - name: Run ESLint
        run: |
          cd backend && npm run lint
          cd ../frontend/web && npm run lint
          cd ../extension && npm run lint

      - name: Check Prettier formatting
        run: |
          cd backend && npm run format:check
          cd ../frontend/web && npm run format:check
          cd ../extension && npm run format:check

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend/web && npm ci
          cd ../extension && npm ci

      - name: Run npm audit
        run: |
          cd backend && npm audit --audit-level=high
          cd ../frontend/web && npm audit --audit-level=high
          cd ../extension && npm audit --audit-level=high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install backend dependencies
        run: cd backend && npm ci

      - name: Run backend tests
        run: cd backend && npm test
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/shopsavr_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key

      - name: Generate coverage report
        run: cd backend && npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install frontend dependencies
        run: cd frontend/web && npm ci

      - name: Run frontend tests
        run: cd frontend/web && npm test -- --coverage --watchAll=false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/web/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Extension Tests
  extension-tests:
    name: Extension Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install extension dependencies
        run: cd frontend/extension && npm ci

      - name: Run extension tests
        run: cd frontend/extension && npm test

      - name: Build extension
        run: cd frontend/extension && npm run build:prod

      - name: Upload extension artifacts
        uses: actions/upload-artifact@v3
        with:
          name: extension-build
          path: frontend/extension/dist/

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        ports:
          - 27017:27017
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend/web && npm ci

      - name: Start backend server
        run: cd backend && npm start &
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/shopsavr_e2e
          REDIS_URL: redis://localhost:6379

      - name: Start frontend server
        run: cd frontend/web && npm start &

      - name: Wait for servers
        run: |
          npx wait-on http://localhost:3000
          npx wait-on http://localhost:3001

      - name: Run E2E tests
        run: npm run test:e2e

  # Build and Deploy (only on main branch)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [lint, security, backend-tests, frontend-tests, extension-tests, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend/web && npm ci

      - name: Build frontend
        run: cd frontend/web && npm run build

      - name: Deploy to staging
        run: echo "Deploy to staging environment"
        # Add your deployment script here

      - name: Run smoke tests
        run: echo "Run smoke tests against staging"
        # Add smoke tests here

      - name: Deploy to production
        run: echo "Deploy to production environment"
        # Add production deployment script here

  # Notify on failure
  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [lint, security, backend-tests, frontend-tests, extension-tests, e2e-tests]
    if: failure()
    
    steps:
      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#dev-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}