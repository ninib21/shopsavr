// ShopSavr Coupon Automation Engine
// Handles automatic coupon detection, testing, and application

class CouponAutomation {
  constructor(contentScript) {
    this.contentScript = contentScript;
    this.domain = contentScript.domain;
    this.siteDetector = contentScript.siteDetector;
    this.isRunning = false;
    this.testResults = new Map();
    this.appliedCoupon = null;
    this.originalTotal = null;
  }

  async startAutomaticCouponTesting(coupons) {
    if (this.isRunning) {
      console.log('Coupon testing already in progress');
      return;
    }

    this.isRunning = true;
    this.testResults.clear();
    
    try {
      // Store original total for comparison
      this.originalTotal = this.extractCurrentTotal();
      
      // Show automation widget
      this.showAutomationWidget(coupons.length);
      
      // Test each coupon
      for (let i = 0; i < coupons.length; i++) {
        const coupon = coupons[i];
        
        this.updateAutomationProgress(i + 1, coupons.length, coupon.code);
        
        const result = await this.testSingleCoupon(coupon);
        this.testResults.set(coupon.code, result);
        
        if (result.success && result.savings > 0) {
          // Found a working coupon, stop testing
          this.appliedCoupon = coupon;
          this.showSuccessMessage(coupon, result.savings);
          break;
        }
        
        // Wait between tests to avoid rate limiting
        await this.sleep(1500);
      }
      
      // If no coupon worked, show results
      if (!this.appliedCoupon) {
        this.showNoWorkingCouponsMessage();
      }
      
    } catch (error) {
      console.error('Error during automatic coupon testing:', error);
      this.showErrorMessage('Failed to test coupons automatically');
    } finally {\n      this.isRunning = false;\n      this.hideAutomationWidget();\n    }\n  }\n\n  async testSingleCoupon(coupon) {\n    try {\n      // Find coupon field and apply button\n      const couponField = this.siteDetector.findCouponField();\n      const applyButton = this.siteDetector.findApplyButton();\n      \n      if (!couponField || !applyButton) {\n        return {\n          success: false,\n          error: 'Coupon field or apply button not found',\n          savings: 0\n        };\n      }\n\n      // Clear existing coupon\n      await this.clearExistingCoupon(couponField);\n      \n      // Enter coupon code\n      await this.enterCouponCode(couponField, coupon.code);\n      \n      // Click apply button\n      await this.clickApplyButton(applyButton);\n      \n      // Wait for response\n      await this.sleep(2000);\n      \n      // Check if coupon was applied successfully\n      const wasApplied = this.checkCouponApplication();\n      const newTotal = this.extractCurrentTotal();\n      const savings = this.calculateSavings(this.originalTotal, newTotal);\n      \n      // Record the attempt\n      await this.recordCouponAttempt(coupon.code, wasApplied, savings);\n      \n      return {\n        success: wasApplied,\n        savings: savings,\n        newTotal: newTotal,\n        coupon: coupon\n      };\n      \n    } catch (error) {\n      console.error(`Error testing coupon ${coupon.code}:`, error);\n      return {\n        success: false,\n        error: error.message,\n        savings: 0\n      };\n    }\n  }\n\n  async clearExistingCoupon(couponField) {\n    // Clear any existing coupon code\n    couponField.value = '';\n    couponField.dispatchEvent(new Event('input', { bubbles: true }));\n    couponField.dispatchEvent(new Event('change', { bubbles: true }));\n    await this.sleep(300);\n  }\n\n  async enterCouponCode(couponField, code) {\n    // Focus the field\n    couponField.focus();\n    await this.sleep(200);\n    \n    // Simulate typing the coupon code\n    for (let i = 0; i < code.length; i++) {\n      couponField.value += code[i];\n      couponField.dispatchEvent(new Event('input', { bubbles: true }));\n      await this.sleep(50);\n    }\n    \n    // Trigger change event\n    couponField.dispatchEvent(new Event('change', { bubbles: true }));\n    await this.sleep(200);\n  }\n\n  async clickApplyButton(applyButton) {\n    // Scroll button into view if needed\n    applyButton.scrollIntoView({ behavior: 'smooth', block: 'center' });\n    await this.sleep(300);\n    \n    // Click the apply button\n    applyButton.click();\n  }\n\n  checkCouponApplication() {\n    // Use site-specific detection\n    if (this.siteDetector.checkCouponSuccess()) {\n      return true;\n    }\n    \n    // Generic success indicators\n    const successSelectors = [\n      '.coupon-applied', '.discount-applied', '.promo-applied',\n      '.success-message', '.coupon-success', '.promo-success',\n      '[class*=\"success\"]', '[class*=\"applied\"]'\n    ];\n    \n    for (const selector of successSelectors) {\n      const element = document.querySelector(selector);\n      if (element && this.isElementVisible(element)) {\n        const text = element.textContent.toLowerCase();\n        if (text.includes('applied') || text.includes('success') || text.includes('saved')) {\n          return true;\n        }\n      }\n    }\n    \n    // Check for error messages (indicates coupon was processed but failed)\n    const errorSelectors = [\n      '.coupon-error', '.promo-error', '.error-message',\n      '[class*=\"error\"]', '[class*=\"invalid\"]'\n    ];\n    \n    for (const selector of errorSelectors) {\n      const element = document.querySelector(selector);\n      if (element && this.isElementVisible(element)) {\n        const text = element.textContent.toLowerCase();\n        if (text.includes('invalid') || text.includes('expired') || text.includes('error')) {\n          return false;\n        }\n      }\n    }\n    \n    return false;\n  }\n\n  extractCurrentTotal() {\n    // Site-specific total extraction\n    const orderData = this.siteDetector.extractOrderData();\n    if (orderData && orderData.amount > 0) {\n      return orderData.amount;\n    }\n    \n    // Generic total extraction\n    const totalSelectors = [\n      '.total', '.grand-total', '.order-total', '.cart-total',\n      '[class*=\"total\"]', '[class*=\"grand\"]', '[id*=\"total\"]'\n    ];\n    \n    for (const selector of totalSelectors) {\n      const element = document.querySelector(selector);\n      if (element && this.isElementVisible(element)) {\n        const text = element.textContent.replace(/[^0-9.]/g, '');\n        const amount = parseFloat(text);\n        if (amount > 0) {\n          return amount;\n        }\n      }\n    }\n    \n    return 0;\n  }\n\n  calculateSavings(originalTotal, newTotal) {\n    if (!originalTotal || !newTotal || originalTotal <= newTotal) {\n      return 0;\n    }\n    return originalTotal - newTotal;\n  }\n\n  isElementVisible(element) {\n    return element.offsetParent !== null && \n           window.getComputedStyle(element).display !== 'none' &&\n           window.getComputedStyle(element).visibility !== 'hidden';\n  }\n\n  showAutomationWidget(totalCoupons) {\n    const widget = document.createElement('div');\n    widget.id = 'shopsavr-automation-widget';\n    widget.className = 'shopsavr-automation-widget';\n    widget.innerHTML = `\n      <div class=\"automation-header\">\n        <div class=\"automation-logo\">\n          <span>🤖</span>\n          <span>ShopSavr Auto-Apply</span>\n        </div>\n        <button class=\"automation-close\" onclick=\"this.closest('.shopsavr-automation-widget').remove()\">×</button>\n      </div>\n      <div class=\"automation-content\">\n        <div class=\"automation-progress\">\n          <div class=\"progress-bar\">\n            <div class=\"progress-fill\" id=\"automation-progress-fill\"></div>\n          </div>\n          <div class=\"progress-text\" id=\"automation-progress-text\">\n            Testing coupon 1 of ${totalCoupons}...\n          </div>\n        </div>\n        <div class=\"current-coupon\" id=\"automation-current-coupon\">\n          Preparing to test coupons...\n        </div>\n      </div>\n    `;\n    \n    document.body.appendChild(widget);\n    \n    // Animate in\n    setTimeout(() => {\n      widget.classList.add('automation-visible');\n    }, 100);\n  }\n\n  updateAutomationProgress(current, total, couponCode) {\n    const progressFill = document.getElementById('automation-progress-fill');\n    const progressText = document.getElementById('automation-progress-text');\n    const currentCoupon = document.getElementById('automation-current-coupon');\n    \n    if (progressFill && progressText && currentCoupon) {\n      const percentage = (current / total) * 100;\n      progressFill.style.width = `${percentage}%`;\n      progressText.textContent = `Testing coupon ${current} of ${total}...`;\n      currentCoupon.textContent = `Trying code: ${couponCode}`;\n    }\n  }\n\n  hideAutomationWidget() {\n    const widget = document.getElementById('shopsavr-automation-widget');\n    if (widget) {\n      widget.classList.remove('automation-visible');\n      setTimeout(() => {\n        widget.remove();\n      }, 300);\n    }\n  }\n\n  showSuccessMessage(coupon, savings) {\n    const message = document.createElement('div');\n    message.className = 'shopsavr-success-message';\n    message.innerHTML = `\n      <div class=\"success-content\">\n        <div class=\"success-icon\">🎉</div>\n        <div class=\"success-text\">\n          <h3>Coupon Applied Successfully!</h3>\n          <p>Code <strong>${coupon.code}</strong> saved you <strong>$${savings.toFixed(2)}</strong></p>\n          <p class=\"success-subtitle\">${coupon.title}</p>\n        </div>\n        <button class=\"success-close\" onclick=\"this.closest('.shopsavr-success-message').remove()\">×</button>\n      </div>\n    `;\n    \n    document.body.appendChild(message);\n    \n    // Auto-remove after 5 seconds\n    setTimeout(() => {\n      if (message.parentNode) {\n        message.remove();\n      }\n    }, 5000);\n  }\n\n  showNoWorkingCouponsMessage() {\n    const message = document.createElement('div');\n    message.className = 'shopsavr-info-message';\n    message.innerHTML = `\n      <div class=\"info-content\">\n        <div class=\"info-icon\">😔</div>\n        <div class=\"info-text\">\n          <h3>No Working Coupons Found</h3>\n          <p>We tested ${this.testResults.size} coupon${this.testResults.size !== 1 ? 's' : ''} but none worked for your current order.</p>\n          <p class=\"info-subtitle\">Don't worry, we'll keep looking for new deals!</p>\n        </div>\n        <button class=\"info-close\" onclick=\"this.closest('.shopsavr-info-message').remove()\">×</button>\n      </div>\n    `;\n    \n    document.body.appendChild(message);\n    \n    // Auto-remove after 4 seconds\n    setTimeout(() => {\n      if (message.parentNode) {\n        message.remove();\n      }\n    }, 4000);\n  }\n\n  showErrorMessage(errorText) {\n    const message = document.createElement('div');\n    message.className = 'shopsavr-error-message';\n    message.innerHTML = `\n      <div class=\"error-content\">\n        <div class=\"error-icon\">⚠️</div>\n        <div class=\"error-text\">\n          <h3>Automation Error</h3>\n          <p>${errorText}</p>\n        </div>\n        <button class=\"error-close\" onclick=\"this.closest('.shopsavr-error-message').remove()\">×</button>\n      </div>\n    `;\n    \n    document.body.appendChild(message);\n    \n    // Auto-remove after 4 seconds\n    setTimeout(() => {\n      if (message.parentNode) {\n        message.remove();\n      }\n    }, 4000);\n  }\n\n  async recordCouponAttempt(couponCode, success, savings) {\n    try {\n      await this.contentScript.sendMessageToBackground({\n        action: 'recordCouponAttempt',\n        couponCode: couponCode,\n        domain: this.domain,\n        success: success,\n        savings: savings,\n        timestamp: Date.now()\n      });\n    } catch (error) {\n      console.error('Error recording coupon attempt:', error);\n    }\n  }\n\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  // Public methods for manual control\n  stopAutomation() {\n    this.isRunning = false;\n    this.hideAutomationWidget();\n  }\n\n  getTestResults() {\n    return Array.from(this.testResults.entries()).map(([code, result]) => ({\n      code,\n      ...result\n    }));\n  }\n\n  getAppliedCoupon() {\n    return this.appliedCoupon;\n  }\n}\n\n// Export for use in content script\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = CouponAutomation;\n} else {\n  window.CouponAutomation = CouponAutomation;\n}